actors
actors[actors$name == NA] <- ""
actors[name == NA] <- ""
actors <- sapply(actors, as.character) # since your values are `factor`
actors[name == NA] <- ""
actors[actors$name == NA] <- ""
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors[is.na(actors)] <- ""
actors <- as.matrix(actors)
actors
actors[is.na(actors)] <- ""
actors <- as.matrix(as.character(actors))
actors[is.na(actors)] <- ""
actors <- as.data.frame(actors)
actors
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
g[]
hotels
new_df
new_df <- as.matrix(as.character(new_df))
new_df[is.na(new_df)] <- ""
new_df <- as.data.frame(new_df)
hotels <- as.data.frame(unique(df$Hotel))
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
new_df
new_df <- df[,c('Hotel', 'Hotel2')]
names(new_df) <- c("from", "to")
new_df <- as.matrix(as.character(new_df))
new_df[is.na(new_df)] <- ""
new_df <- as.data.frame(new_df)
new_df
new_df <- df[,c('Hotel', 'Hotel2')]
names(new_df) <- c("from", "to")
new_df
new_df <- as.matrix(as.character(new_df))
new_df
df <- read.csv('~/Desktop/data.csv')
df$Date <- as.Date(df$Date, format = "%m/%d/%y")
head(df)
setDT(df)[, date_diff := as.numeric(Date) - shift(as.numeric(Date)), by = User]
setDT(df)[, Hotel2 := shift(.(Hotel), type = "lead"), by = User]
df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
new_df
names(new_df) <- c("from", "to")
new_df <- as.matrix(as.character(new_df))
new_df
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors <- as.matrix(as.character(actors))
actors
actors[is.na(actors)] <- ""
actors
actors <- as.data.frame(actors)
actors
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob"))
actors <- as.matrix(as.character(actors))
actors[is.na(actors)] <- ""
actors <- as.data.frame(actors)
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors <- as.character(actors)
actors[is.na(actors)] <- ""
actors <- as.data.frame(actors)
actors
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors[is.na(actors)] <- 0
actors <- as.data.frame(actors)
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob"))
actors <- as.character(actors)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob"))
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df <- as.character(new_df)
new_df[is.na(new_df)] <- "None"
new_df
new_df <- as.data.frame(new_df)
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df
new_df[is.na(new_df)] <- "None"
new_df <- as.data.frame(as.character(new_df))
new_df
new_df[is.na(new_df)] <- "None"
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df[is.na(new_df)] <- "None"
new_df <- as.matrix(new_df)
new_df
new_df <- new_df[is.na(new_df)] <- "None"
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df <- as.matrix(new_df)
new_df
new_df <- new_df[new_df == "NA"] <- "None"
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df <- as.matrix(new_df)
new_df[new_df == "NA"] <- "None"
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df <- as.matrix(new_df)
new_df[is.na(new_df)] <- "None"
new_df
new_df <- as.data.frame(new_df)
new_df
hotels <- as.data.frame(unique(df$Hotel))
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
names(hotels) <- c("hotels")
none_df <- as.data.frame("None")
none_df
none_df <- ("None")
none_df
none_df <- data.frame("None")
none_df
hotels <- rbind(hotels, none_df)
none_df
none_df <- data.frame("None" = "None")
none_df
hotels <- rbind(hotels, none_df)
none_df <- data.frame("Hotel" = "None")
hotels <- rbind(hotels, none_df)
none_df
hotels
none_df <- data.frame("hotels" = "None")
hotels <- rbind(hotels, none_df)
hotels
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
g[]
g[]
library(mlbgameday)
install.packages("mlbgameday")
library(mlbgameday)
library(doParallel)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
registerDoParallel(cl)
innings_df <- get_payload(start = "2019-05-01", end = "2019-05-01")
innings_df <- get_payload(start = "2019-05-12", end = "2019-05-12")
library(dplyr)
innings_df <- get_payload(start = "2019-05-12", end = "2019-05-12")
con <- dbConnect(RSQLite::SQLite(), dbname = "mlbgameday.sqlite3")
library(mlbgameday)
library(RSQLite)
library(doParallel)
con <- dbConnect(RSQLite::SQLite(), dbname = "mlbgameday.sqlite3")
no_cores <- detectCores() - 2
cl <- makeCluster(no_cores)
registerDoParallel(cl)
get_payload(start = "2019-05-01", end = "2019-05-01", db_con = con)
rlang::last_error()
devtools::install_github("keberwein/mlbgameday")
library(mlbgameday)
get_payload(start = "2019-05-01", end = "2019-05-01", db_con = con)
library(mlbgameday)
devtools::install_github("keberwein/mlbgameday")
library(mlbgameday)
innings_df <- get_payload(start = "2017-04-03", end = "2017-04-04")
remove.packages("mlbgameday")
devtools::install_github("keberwein/mlbgameday")
library(mlbgameday)
R.Version()
library(mlbgameday)
install.packages("mlbgameday")
library(mlbgameday)
install.packages("mlbgameday")
library(mlbgameday)
library(RSQLite)
library(doParallel)
con <- dbConnect(RSQLite::SQLite(), dbname = "mlbgameday.sqlite3")
no_cores <- detectCores() - 2
cl <- makeCluster(no_cores)
registerDoParallel(cl)
get_payload(start = "2019-05-01", end = "2019-05-01", db_con = con)
library(data.table)
library(dplyr)
library(tidyr)
distances <- fread('~/Downloads/distances.csv')
distances <- distances %>%
select(-distance_miles)
sales <- fread('~/Downloads/sales.csv')
sales <- sales %>%
spread(material, volume)
sales[is.na(sales)] <- 0
sales2 <- sales %>%
left_join(., distances, by = c('ship_to_number' = 'outlet1'))
products <- vector()
for(i in 1:nrow(sales2)){
products[i] <- ''
for(j in 2:9){
if(!is.na(sales2[i, 10])){
if(sales2[i, j] < data.frame(sales[sales$ship_to_number == sales2$outlet2[i]])[,j])
{products[i] <- paste(products[i], sales2$ship_to_number[i],
sales2$outlet2[i], names(sales)[j], sep = '_')}
}
}
#print(products)
}
a
head(products)
products
head(sales)
head(sales2)
for(i in 1:nrow(sales2)){
products[i] <- ''
for(j in 2:9){  # for 2 to number of distince columns
if(!is.na(sales2[i, 'outlet2'])){   # 10 represents outlet2 field
if(sales2[i, j] < data.frame(sales[sales$ship_to_number == sales2$outlet2[i]])[,j])  # if outlet1 is less than outlet3
{products[i] <- paste(products[i], sales2$ship_to_number[i],
sales2$outlet2[i], names(sales)[j], sep = '_')}
}
}
#print(products)
}
products
head(sales2)
head(sales)
library(data.table)
library(dplyr)
library(tidyr)
distances <- fread('~/Downloads/distances.csv')
distances <- distances %>%
select(-distance_miles)
sales <- fread('~/Downloads/sales.csv')
sales <- sales %>%
spread(material, volume)
sales[is.na(sales)] <- 0
sales2 <- sales %>%
left_join(., distances, by = c('ship_to_number' = 'outlet1'))
products <- vector()
head(sales)
head(sales2)
products
for(i in 1:nrow(sales)){
products[i] <- ''
for(j in 2:ncol(sales)){  # for 2 to number of distince columns
if(!is.na(sales2[i, 'outlet2'])){   # 10 represents outlet2 field
if(sales2[i, j] < data.frame(sales[sales$ship_to_number == sales2$outlet2[i]])[,j])  # if outlet1 is less than outlet3
{products[i] <- paste(products[i], sales2$ship_to_number[i],
sales2$outlet2[i], names(sales)[j], sep = '_')}
}
}
print(products)
}
for(i in 1:nrow(sales)){
products[i] <- ''
for(j in 2:ncol(sales)){  # for 2 to number of distince columns
if(!is.na(sales2[i, 'outlet2'])){   # 10 represents outlet2 field
if(sales2[i, j] < data.frame(sales[sales$ship_to_number == sales2$outlet2[i]])[,j])  # if outlet1 is less than outlet3
{products[i] <- paste(products[i], sales2$ship_to_number[i],
sales2$outlet2[i], names(sales)[j], sep = '_')}
}
}
#print(products)
}
products
head(sales)
head(sales2)
head(sales2, 10)
library(igraph)
library(data.table)
library(dplyr)
library(plyr)
dat=read.csv('~/Desktop/hotel_matrix.csv',header=TRUE,row.names=1,check.names=FALSE) # choose an adjacency matrix from a .csv file
######### Import Libraries #########
library(dplyr)
library(RPostgreSQL)
library(data.table)
library(igraph)
library(visNetwork)
library(tidyr)
######### Import Libraries #########
library(dplyr)
library(RPostgreSQL)
library(data.table)
library(igraph)
library(visNetwork)
install.packages("visNetwork")
library(visNetwork)
library(tidyr)
library(tibble)
library(ggplot2)
library(arules)
install.packages("arules")
#library(arules)
library(arulesViz)
install.packages("arulesViz")
df <- fread("~/NPS/guest_next_stay_network.csv")
install.packages(c("arulesViz", "RPostgreSQL", "visNetwork"))
R.Version()
raries #########
library(dplyr)
raries #########
library(dplyr)
######### Import Libraries #########
library(dplyr)
library(RPostgreSQL)
install.packages(c("arulesViz", "data.table", "dplyr", "ggplot2", "igraph", "RPostgreSQL", "tibble", "tidyr", "visNetwork"))
library(rpart)
df <- read.csv('~/Downloads/demo.csv')
head(df)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "class")
tree
plot(tree)
tree <- rpart(Profit ~ Insurance + Duration,
data = df)
plot(tree)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "anova")
plot(tree)
head(df)
rpart.plot(tree)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(tree)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "anova")
rpart.plot(tree)
rpart.rules(tree)
df <- read.csv('~/Desktop/demo.csv')
head(df)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "anova")
rpart.plot(tree)
rpart.rules(tree)
df <- read.csv('~/Desktop/demo.csv')
head(df)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "anova")
rpart.plot(tree)
rpart.rules(tree)
shiny::runApp('Documents/nhl/NHLShotCharts')
setwd("~/Documents/nhl/NHLShotCharts")
### Extract data from SQLite Table ###
mydb <- dbConnect(RSQLite::SQLite(), "~/data/nhl2019_2020.sqlite")
### Extract data from SQLite Table ###
mydb <- dbConnect(RSQLite::SQLite(), "~/data/nhl2019_2020.sqlite")
### Extract data from SQLite Table ###
mydb <- dbConnect(RSQLite::SQLite(), "data/nhl2019_2020.sqlite")
runApp()
### Extract data from SQLite Table ###
mydb <- dbConnect(RSQLite::SQLite(), "/data/nhl2019_2020.sqlite")
runApp()
runApp()
runApp('~/Documents/nhl/NHLShotCharts')
runApp()
runApp('~/Documents/nhl/NHLShotCharts')
runApp()
runApp()
runApp('~/Documents/nhl/NHLShotCharts')
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/nhl/NHLShotCharts')
shiny::runApp()
runApp()
# server.R
library(nhlscrape)
library(dplyr)
library(ggplot2)
library(RSQLite)
library(data.table)
library(shiny)
library(shinydashboard)
library(plotly)
runApp()
setwd("~/Documents/nhl/NHLShotCharts")
runApp()
runApp()
runApp()
runApp()
shiny::runApp('Documents/nhl/NHLShotCharts')
library(nhlscrape)
library(dplyr)
library(ggplot2)
library(RSQLite)
library(data.table)
library(shiny)
library(shinydashboard)
library(plotly)
library(nhlscrape)
library(dplyr)
library(ggplot2)
library(RSQLite)
library(data.table)
library(shiny)
library(shinydashboard)
library(plotly)
runApp('Documents/nhl/NHLShotCharts')
runApp('Documents/nhl/NHLShotCharts')
library(dplyr)
library(ggplot2)
library(RSQLite)
library(data.table)
# Get Rinks
source('~/Documents/nhl/draw_rink.R')
source('~/Documents/nhl/gg-rink.R')
library(nhlscrape)
library(dplyr)
library(ggplot2)
library(RSQLite)
library(data.table)
# Get Rinks
source('~/Documents/nhl/draw_rink.R')
source('~/Documents/nhl/gg-rink.R')
# Get Rinks
source('~/GitHub/nhl_shot_charts/draw_rink.R')
source('~/GitHub/nhl_shot_charts/gg-rink.R')
### Extract data from SQLite Table ###
setwd('~/GitHub/nhl_shot_charts/data/')
mydb <- dbConnect(RSQLite::SQLite(), "~/GitHub/nhl_shot_charts/data/nhl.sqlite")
mydb <- dbConnect(RSQLite::SQLite(), "/GitHub/nhl_shot_charts/data/nhl.sqlite")
### Extract data from SQLite Table ###
setwd('/GitHub/nhl_shot_charts/data/')
### Extract data from SQLite Table ###
setwd('GitHub/nhl_shot_charts/data/')
### Extract data from SQLite Table ###
setwd('data')
setwd("~/")
### Extract data from SQLite Table ###
setwd('~/GitHub/nhl_shot_charts/data/')
### Extract data from SQLite Table ###
setwd('../GitHub/nhl_shot_charts/data/')
### Extract data from SQLite Table ###
setwd('./GitHub/nhl_shot_charts/data/')
### Extract data from SQLite Table ###
setwd('/GitHub/nhl_shot_charts/data/')
### Extract data from SQLite Table ###
setwd('/GitHub/nhl_shot_charts/data/')
### Extract data from SQLite Table ###
setwd('~/GitHub/nhl_shot_charts/data/')
mydb <- dbConnect(RSQLite::SQLite(), "/GitHub/nhl_shot_charts/data/nhl.sqlite")
mydb <- dbConnect(RSQLite::SQLite(), "/GitHub/nhl_shot_charts/data/nhl2019_2020.sqlite")
mydb <- dbConnect(RSQLite::SQLite(), "nhl2019_2020.sqlite")
events <- dbGetQuery(mydb, 'SELECT *
FROM events')
players <- dbGetQuery(mydb, 'SELECT * FROM players')
teams <- dbGetQuery(mydb, 'SELECT * FROM teams')
shots <- events %>%
# remove shots below goal line
filter(abs(coordinates_x) <= 90) %>%
filter(result_event == 'Shot' | result_event == 'Goal' & (playerType == 'Scorer' | playerType == 'Shooter')) %>%
filter(player_fullName == 'J.T. Compher')
ggplot(shots, aes(x = coordinates_x, y = coordinates_y)) +
gg_rink(side = "right", specs = "nhl") +
gg_rink(side = "left", specs = "nhl") +
geom_point(aes(color = result_event , shape = result_event),
position = "jitter", size = 1.5, alpha = .75, stroke = .5) +
labs(title = paste(shots$player_fullName, "- Shot Chart", sep=" "),
subtitle = paste(format(min(as.Date(shots$about_dateTime)), format = "%m/%d/%Y"), 'to', format(max(as.Date(shots$about_dateTime)), format = "%m/%d/%Y"), sep=' '),
x = NULL,
y = NULL) +
scale_color_manual(values = c("Shot" = "black", "Goal" = "green"),
name = NULL) +
scale_shape_manual(values = c("Shot" = 4, "Goal" = 16),
name = NULL, ) +
scale_x_continuous(breaks = seq(-30, 30, by = 5)) +
scale_y_continuous(breaks = seq(-15, 15, by = 3)) +
theme(legend.title=element_blank(),
legend.position="bottom",
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5),
axis.text.x=element_blank(),
axis.text.y=element_blank())
ggplot(shots, aes(x = coordinates_x, y = coordinates_y)) +
gg_rink(side = "right", specs = "nhl") +
gg_rink(side = "left", specs = "nhl") +
geom_point(aes(color = result_event , shape = result_event),
position = "jitter", size = 1.5, alpha = .75, stroke = .5) +
labs(title = paste(shots$player_fullName, "- Shot Chart", sep=" "),
subtitle = paste(format(min(as.Date(shots$about_dateTime)), format = "%m/%d/%Y"), 'to', format(max(as.Date(shots$about_dateTime)), format = "%m/%d/%Y"), sep=' '),
x = NULL,
y = NULL) +
scale_color_manual(values = c("Shot" = "black", "Goal" = "darkgreen"),
name = NULL) +
scale_shape_manual(values = c("Shot" = 4, "Goal" = 16),
name = NULL, ) +
scale_x_continuous(breaks = seq(-30, 30, by = 5)) +
scale_y_continuous(breaks = seq(-15, 15, by = 3)) +
theme(legend.title=element_blank(),
legend.position="bottom",
plot.title=element_text(hjust=0.5),
plot.subtitle=element_text(hjust=0.5),
axis.text.x=element_blank(),
axis.text.y=element_blank())
runApp('~/Documents/nhl/NHLShotCharts')
runApp('~/Documents/nhl/NHLShotCharts')
