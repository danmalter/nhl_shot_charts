g
dat=read.csv('~/Desktop/hotel_matrix.csv',header=TRUE,row.names=1,check.names=FALSE) # choose an adjacency matrix from a .csv file
m=as.matrix(dat) # coerces the data set as a matrix
g=graph.adjacency(m,mode="undirected",weighted=NULL) # this will create an 'igraph object'
g
g[]
df <- read.csv('~/Desktop/data.csv')
df$Date <- as.Date(df$Date, format = "%m/%d/%y")
head(df)
setDT(df)[, date_diff := as.numeric(Date) - shift(as.numeric(Date)), by = User]
setDT(df)[, Hotel2 := shift(.(Hotel), type = "lead"), by = User]
df
m <- as.matrix(df)
g <- graph.adjacency(m,mode="undirected",weighted=NULL) # this will create an 'igraph object'
g[]
df
new_df <- df[,c('Hotel', 'Hotel2')]
new_df
m <- as.matrix(new_df)
g <- graph.adjacency(m,mode="undirected",weighted=NULL) # this will create an 'igraph object'
m
g <- graph.adjacency(m) # this will create an 'igraph object'
g[]
g <- graph.adjacency(m, mode="undirected") # this will create an 'igraph object'
graph_from_incidence_matrix(m)
g <- graph_from_incidence_matrix(m)
g[]
df <- read.csv('~/Desktop/data.csv')
df$Date <- as.Date(df$Date, format = "%m/%d/%y")
head(df)
setDT(df)[, date_diff := as.numeric(Date) - shift(as.numeric(Date)), by = User]
setDT(df)[, Hotel2 := shift(.(Hotel), type = "lead"), by = User]
df
new_df <- df[,c('Hotel', 'Hotel2')]
m <- as.matrix(new_df)
g <- graph_from_incidence_matrix(m,  add.names = TRUE)
g <- graph_from_incidence_matrix(m,  add.names = c('Hotel1', 'Hotel2'))
m <- as.matrix(new_df)
m
graph_from_incidence_matrix(m)
g <- graph_from_incidence_matrix(m)
g[]
graph_from_data_frame(d=new_df$Hotel, vertices=new_df$Hotel2, directed=T)
new_df
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
"Esmeralda"),
age=c(48,33,45,34,21),
gender=c("F","M","F","M","F"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David", "Esmeralda"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
same.dept=c(FALSE,FALSE,TRUE,FALSE,FALSE,TRUE),
friendship=c(4,5,5,2,1,1), advice=c(4,5,5,4,2,3))
relations
actors
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
hotels <- unique(df$Hotel)
graph_from_data_frame(d=new_df$Hotel, vertices=hotels, directed=T)
hotels
new_df
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
g <- graph_from_data_frame(new_df$Hotel, directed=TRUE, vertices=hotels)
relations
actors
new_df
new_df <- df[,c('from', 'to')]
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
df <- read.csv('~/Desktop/data.csv')
df$Date <- as.Date(df$Date, format = "%m/%d/%y")
head(df)
setDT(df)[, date_diff := as.numeric(Date) - shift(as.numeric(Date)), by = User]
setDT(df)[, Hotel2 := shift(.(Hotel), type = "lead"), by = User]
df
new_df <- df[,c('from', 'to')]
new_df <- df[,c('Hotel', 'Hotel2')]
names(new_df) <- c("from", "to")
hotels <- unique(df$Hotel)
new_df
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
new_df
hotels
hotels <- as.data.frame(unique(df$Hotel))
hotels
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
hotels
df
actors
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
g
print(g, e=TRUE, v=TRUE)
as_data_frame(g, what="vertices")
as_data_frame(g, what="edges")
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=df)
hotels <- as.data.frame(unique(df$Hotel))
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
new_df
hotels
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
"Esmeralda"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob"))
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
as_data_frame(g, what="vertices")
as_data_frame(g, what="edges")
g[]
actors
hotels
df
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob"))
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors[is.na(actors)] <- ''
actors
actors[is.na(actors$name)] <- ''
actors$name[is.na(actors$name)] <- ''
actors$name[is.na(actors$name)] <- 0
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors[is.na(actors$name)] <- 0
actors[name == "NA"] <- ""
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors[name == "NA"] <- ""
actors[actor$name == "NA"] <- ""
actors[actors$name == "NA"] <- ""
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors
actors[actors$name == NA] <- ""
actors[name == NA] <- ""
actors <- sapply(actors, as.character) # since your values are `factor`
actors[name == NA] <- ""
actors[actors$name == NA] <- ""
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors[is.na(actors)] <- ""
actors <- as.matrix(actors)
actors
actors[is.na(actors)] <- ""
actors <- as.matrix(as.character(actors))
actors[is.na(actors)] <- ""
actors <- as.data.frame(actors)
actors
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
g[]
hotels
new_df
new_df <- as.matrix(as.character(new_df))
new_df[is.na(new_df)] <- ""
new_df <- as.data.frame(new_df)
hotels <- as.data.frame(unique(df$Hotel))
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
new_df
new_df <- df[,c('Hotel', 'Hotel2')]
names(new_df) <- c("from", "to")
new_df <- as.matrix(as.character(new_df))
new_df[is.na(new_df)] <- ""
new_df <- as.data.frame(new_df)
new_df
new_df <- df[,c('Hotel', 'Hotel2')]
names(new_df) <- c("from", "to")
new_df
new_df <- as.matrix(as.character(new_df))
new_df
df <- read.csv('~/Desktop/data.csv')
df$Date <- as.Date(df$Date, format = "%m/%d/%y")
head(df)
setDT(df)[, date_diff := as.numeric(Date) - shift(as.numeric(Date)), by = User]
setDT(df)[, Hotel2 := shift(.(Hotel), type = "lead"), by = User]
df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
new_df
names(new_df) <- c("from", "to")
new_df <- as.matrix(as.character(new_df))
new_df
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors <- as.matrix(as.character(actors))
actors
actors[is.na(actors)] <- ""
actors
actors <- as.data.frame(actors)
actors
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob"))
actors <- as.matrix(as.character(actors))
actors[is.na(actors)] <- ""
actors <- as.data.frame(actors)
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
NA))
actors <- as.character(actors)
actors[is.na(actors)] <- ""
actors <- as.data.frame(actors)
actors
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors[is.na(actors)] <- 0
actors <- as.data.frame(actors)
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob"))
actors <- as.character(actors)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob"))
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df <- as.character(new_df)
new_df[is.na(new_df)] <- "None"
new_df
new_df <- as.data.frame(new_df)
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df
new_df[is.na(new_df)] <- "None"
new_df <- as.data.frame(as.character(new_df))
new_df
new_df[is.na(new_df)] <- "None"
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df[is.na(new_df)] <- "None"
new_df <- as.matrix(new_df)
new_df
new_df <- new_df[is.na(new_df)] <- "None"
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df <- as.matrix(new_df)
new_df
new_df <- new_df[new_df == "NA"] <- "None"
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df <- as.matrix(new_df)
new_df[new_df == "NA"] <- "None"
new_df
new_df <- as.data.frame(df[,c('Hotel', 'Hotel2')])
names(new_df) <- c("from", "to")
new_df <- as.matrix(new_df)
new_df[is.na(new_df)] <- "None"
new_df
new_df <- as.data.frame(new_df)
new_df
hotels <- as.data.frame(unique(df$Hotel))
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
names(hotels) <- c("hotels")
none_df <- as.data.frame("None")
none_df
none_df <- ("None")
none_df
none_df <- data.frame("None")
none_df
hotels <- rbind(hotels, none_df)
none_df
none_df <- data.frame("None" = "None")
none_df
hotels <- rbind(hotels, none_df)
none_df <- data.frame("Hotel" = "None")
hotels <- rbind(hotels, none_df)
none_df
hotels
none_df <- data.frame("hotels" = "None")
hotels <- rbind(hotels, none_df)
hotels
g <- graph_from_data_frame(new_df, directed=TRUE, vertices=hotels)
g[]
g[]
library(mlbgameday)
install.packages("mlbgameday")
library(mlbgameday)
library(doParallel)
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
registerDoParallel(cl)
innings_df <- get_payload(start = "2019-05-01", end = "2019-05-01")
innings_df <- get_payload(start = "2019-05-12", end = "2019-05-12")
library(dplyr)
innings_df <- get_payload(start = "2019-05-12", end = "2019-05-12")
con <- dbConnect(RSQLite::SQLite(), dbname = "mlbgameday.sqlite3")
library(mlbgameday)
library(RSQLite)
library(doParallel)
con <- dbConnect(RSQLite::SQLite(), dbname = "mlbgameday.sqlite3")
no_cores <- detectCores() - 2
cl <- makeCluster(no_cores)
registerDoParallel(cl)
get_payload(start = "2019-05-01", end = "2019-05-01", db_con = con)
rlang::last_error()
devtools::install_github("keberwein/mlbgameday")
library(mlbgameday)
get_payload(start = "2019-05-01", end = "2019-05-01", db_con = con)
library(mlbgameday)
devtools::install_github("keberwein/mlbgameday")
library(mlbgameday)
innings_df <- get_payload(start = "2017-04-03", end = "2017-04-04")
remove.packages("mlbgameday")
devtools::install_github("keberwein/mlbgameday")
library(mlbgameday)
R.Version()
library(mlbgameday)
install.packages("mlbgameday")
library(mlbgameday)
install.packages("mlbgameday")
library(mlbgameday)
library(RSQLite)
library(doParallel)
con <- dbConnect(RSQLite::SQLite(), dbname = "mlbgameday.sqlite3")
no_cores <- detectCores() - 2
cl <- makeCluster(no_cores)
registerDoParallel(cl)
get_payload(start = "2019-05-01", end = "2019-05-01", db_con = con)
library(data.table)
library(dplyr)
library(tidyr)
distances <- fread('~/Downloads/distances.csv')
distances <- distances %>%
select(-distance_miles)
sales <- fread('~/Downloads/sales.csv')
sales <- sales %>%
spread(material, volume)
sales[is.na(sales)] <- 0
sales2 <- sales %>%
left_join(., distances, by = c('ship_to_number' = 'outlet1'))
products <- vector()
for(i in 1:nrow(sales2)){
products[i] <- ''
for(j in 2:9){
if(!is.na(sales2[i, 10])){
if(sales2[i, j] < data.frame(sales[sales$ship_to_number == sales2$outlet2[i]])[,j])
{products[i] <- paste(products[i], sales2$ship_to_number[i],
sales2$outlet2[i], names(sales)[j], sep = '_')}
}
}
#print(products)
}
a
head(products)
products
head(sales)
head(sales2)
for(i in 1:nrow(sales2)){
products[i] <- ''
for(j in 2:9){  # for 2 to number of distince columns
if(!is.na(sales2[i, 'outlet2'])){   # 10 represents outlet2 field
if(sales2[i, j] < data.frame(sales[sales$ship_to_number == sales2$outlet2[i]])[,j])  # if outlet1 is less than outlet3
{products[i] <- paste(products[i], sales2$ship_to_number[i],
sales2$outlet2[i], names(sales)[j], sep = '_')}
}
}
#print(products)
}
products
head(sales2)
head(sales)
library(data.table)
library(dplyr)
library(tidyr)
distances <- fread('~/Downloads/distances.csv')
distances <- distances %>%
select(-distance_miles)
sales <- fread('~/Downloads/sales.csv')
sales <- sales %>%
spread(material, volume)
sales[is.na(sales)] <- 0
sales2 <- sales %>%
left_join(., distances, by = c('ship_to_number' = 'outlet1'))
products <- vector()
head(sales)
head(sales2)
products
for(i in 1:nrow(sales)){
products[i] <- ''
for(j in 2:ncol(sales)){  # for 2 to number of distince columns
if(!is.na(sales2[i, 'outlet2'])){   # 10 represents outlet2 field
if(sales2[i, j] < data.frame(sales[sales$ship_to_number == sales2$outlet2[i]])[,j])  # if outlet1 is less than outlet3
{products[i] <- paste(products[i], sales2$ship_to_number[i],
sales2$outlet2[i], names(sales)[j], sep = '_')}
}
}
print(products)
}
for(i in 1:nrow(sales)){
products[i] <- ''
for(j in 2:ncol(sales)){  # for 2 to number of distince columns
if(!is.na(sales2[i, 'outlet2'])){   # 10 represents outlet2 field
if(sales2[i, j] < data.frame(sales[sales$ship_to_number == sales2$outlet2[i]])[,j])  # if outlet1 is less than outlet3
{products[i] <- paste(products[i], sales2$ship_to_number[i],
sales2$outlet2[i], names(sales)[j], sep = '_')}
}
}
#print(products)
}
products
head(sales)
head(sales2)
head(sales2, 10)
library(igraph)
library(data.table)
library(dplyr)
library(plyr)
dat=read.csv('~/Desktop/hotel_matrix.csv',header=TRUE,row.names=1,check.names=FALSE) # choose an adjacency matrix from a .csv file
######### Import Libraries #########
library(dplyr)
library(RPostgreSQL)
library(data.table)
library(igraph)
library(visNetwork)
library(tidyr)
######### Import Libraries #########
library(dplyr)
library(RPostgreSQL)
library(data.table)
library(igraph)
library(visNetwork)
install.packages("visNetwork")
library(visNetwork)
library(tidyr)
library(tibble)
library(ggplot2)
library(arules)
install.packages("arules")
#library(arules)
library(arulesViz)
install.packages("arulesViz")
df <- fread("~/NPS/guest_next_stay_network.csv")
install.packages(c("arulesViz", "RPostgreSQL", "visNetwork"))
R.Version()
raries #########
library(dplyr)
raries #########
library(dplyr)
######### Import Libraries #########
library(dplyr)
library(RPostgreSQL)
install.packages(c("arulesViz", "data.table", "dplyr", "ggplot2", "igraph", "RPostgreSQL", "tibble", "tidyr", "visNetwork"))
library(rpart)
df <- read.csv('~/Downloads/demo.csv')
head(df)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "class")
tree
plot(tree)
tree <- rpart(Profit ~ Insurance + Duration,
data = df)
plot(tree)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "anova")
plot(tree)
head(df)
rpart.plot(tree)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(tree)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "anova")
rpart.plot(tree)
rpart.rules(tree)
df <- read.csv('~/Desktop/demo.csv')
head(df)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "anova")
rpart.plot(tree)
rpart.rules(tree)
df <- read.csv('~/Desktop/demo.csv')
head(df)
tree <- rpart(Profit ~ Insurance + Duration,
data = df, method = "anova")
rpart.plot(tree)
rpart.rules(tree)
shiny::runApp('Documents/nhl/NHLShotCharts')
setwd("~/Documents/nhl/NHLShotCharts")
### Extract data from SQLite Table ###
mydb <- dbConnect(RSQLite::SQLite(), "~/data/nhl2019_2020.sqlite")
### Extract data from SQLite Table ###
mydb <- dbConnect(RSQLite::SQLite(), "~/data/nhl2019_2020.sqlite")
### Extract data from SQLite Table ###
mydb <- dbConnect(RSQLite::SQLite(), "data/nhl2019_2020.sqlite")
runApp()
### Extract data from SQLite Table ###
mydb <- dbConnect(RSQLite::SQLite(), "/data/nhl2019_2020.sqlite")
runApp()
runApp()
runApp('~/Documents/nhl/NHLShotCharts')
runApp()
runApp('~/Documents/nhl/NHLShotCharts')
runApp()
runApp()
runApp('~/Documents/nhl/NHLShotCharts')
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/nhl/NHLShotCharts')
